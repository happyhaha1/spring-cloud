apply from: 'dependency.gradle'

allprojects {
    apply plugin: 'idea'


    buildscript {
        repositories {
            mavenCentral()
            maven { url "https://repo.spring.io/snapshot" }
            maven { url "https://repo.spring.io/milestone" }
        }
        dependencies {
            classpath(libraries.'springBootGradlePlugin')
            classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        }
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

subprojects { subproj ->



    apply plugin: 'java'

    // 用于发布 jar 包到相应服务器
    apply plugin: 'maven'


    // 由于根下屏蔽了 java 插件，所以把这些方法定义转移到各个子项目下读取
    apply from: "../utils.gradle"

    version = project_version
    group = project_group

    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk

    jar {
        excludes = ['**/rebel.xml', '**/.keep']

        doFirst {
            manifest = defaultManifest([
                    project: subproj,
                    projectVendor: project_vendor
            ])
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
        doFirst {
            manifest = defaultManifest([
                    project: subproj,
                    projectVendor: project_vendor
            ])
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        doFirst {
            manifest = defaultManifest([
                    project: subproj,
                    projectVendor: project_vendor
            ])
        }
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    artifacts {
        archives jar
        archives sourcesJar
    }

    configurations {
    }

    dependencies {
        ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')
        ext.rootProjectLibs = new File(rootProject.rootDir, 'libs').getAbsolutePath()
        ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')
    }


    idea{
        module{
            outputDir = file("${buildDir}/classes/java/main")

            testOutputDir = file("${buildDir}/classes/java/test")
        }
    }

}
